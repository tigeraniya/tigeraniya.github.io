API
===

.. http:get:: /users/(int:user_id)/posts/(tag)

   The posts tagged with `tag` that the user (`user_id`) wrote.

   **Example request**:

   .. sourcecode:: http

      GET /users/123/posts/web HTTP/1.1
      Host: example.com
      Accept: application/json, text/javascript

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Vary: Accept
      Content-Type: text/javascript

      [
        {
          "post_id": 12345,
          "author_id": 123,
          "tags": ["server", "web"],
          "subject": "I tried Nginx"
        },
        {
          "post_id": 12346,
          "author_id": 123,
          "tags": ["html5", "standards", "web"],
          "subject": "We go to HTML 5"
        }
      ]

   :query sort: one of ``hit``, ``created-at``
   :query offset: offset number. default is 0
   :query limit: limit number. default is 30
   :reqheader Accept: the response content type depends on
                      :mailheader:`Accept` header
   :reqheader Authorization: optional OAuth token to authenticate
   :resheader Content-Type: this depends on :mailheader:`Accept`
                            header of request
   :statuscode 200: no error
   :statuscode 404: there's no user

Register new user
-----------------

.. http:post:: /users/register/ 

   Register new users with the backend

   :form username: name of user
   :form password: password 
   :form email: email of user
   :reqheader Accept: application/json, text/javascript
   
   **Example request**:
   
   .. sourcecode:: http
      
      HTTP/1.0 201 CREATED
      Allow: POST, OPTIONS
      Content-Type: application/json
      Date: Wed, 30 Jul 2014 13:17:11 GMT
      Server: WSGIServer/0.1 Python/2.7.6
      Vary: Accept, Cookie
      X-Frame-Options: SAMEORIGIN
      
      {
          "id": null, 
          "job": [], 
          "username": "arunk"
      }
   
      HTTP/1.0 400 BAD REQUEST
      Allow: POST, OPTIONS
      Content-Type: application/json
      Date: Wed, 30 Jul 2014 13:17:18 GMT
      Server: WSGIServer/0.1 Python/2.7.6
      Vary: Accept, Cookie
      X-Frame-Options: SAMEORIGIN
      
      {
          "username": [
              "A user with that username already exists."
          ]
      }
         


   :statuscode 201: User created
   :statusode 400: Bad request
